import useAuth from "../contexts/AuthContext";
import { getCookie } from "../services/cookies";
import {
  Accordion,
  AccordionButton,
  AccordionPanel,
  AccordionIcon,
  Box,
  Button,
  HStack,
  Text,
  Image,
  Heading,
  ButtonGroup,
  Stack,
  RadioGroup,
  InputLeftElement,
  Input,
  Container,
  Spacer,
  InputGroup, InputRightElement, IconButton
} from "@chakra-ui/react";
import { FaEye, FaEyeSlash } from "react-icons/fa";
import Head from "next/head";
import { useTranslation } from 'react-i18next';
import SetLanguage from "../contexts/language";
import Info from "../../components/InfoComponent";
import AccordionItemProps from "../../components/AcordionItem";
import {
  AddIcon,
  MinusIcon,
  PhoneIcon,
  WarningTwoIcon,
} from "@chakra-ui/icons";
import FooterJSX from "../../components/Footer";
import RadioPlans from "../../components/RadioPlans";
import { useRouter } from "next/router";
import Images from "next/image";
import SegmentedControl from "../../components/SegmentControl";
import {useEffect, useRef, useState} from "react";
import Link from "next/link";

export default function Home() {
  const { login } = useAuth();
  const [isSelected, setIsSelected] = useState(null);
  const [email, setEmail] = useState("");
  const [password, setPassword] = useState("");
  const router = useRouter();
    const { allApiWithClientIP } = SetLanguage()
    const { t, i18n } = useTranslation();
  const handleItemClick = (index) => {
    setIsSelected(index.target.value);
  };
  const [showPassword, setShowPassword] = useState(false);

  

  const [selectedValue1, setSelectedValue1] = useState("complete");

    useEffect(() => {
        allApiWithClientIP();
    }, [])

  return (
    <Box>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <Box width={"100%"} height={"50vh"}  marginTop={'-5px'} bg="#000">
        <Container maxW={'container.xl'} bg="#000">
        <Box
         w={'100%'}
         bg="#000"
         justifyContent={{base : 'space-between' , md : 'space-between'}}
         display={'flex'}
         flexDirection={'row'}
        >
        
          <Box bg="#000">
           <Link href="/">
           <Image
           
           
           width={{base : 120 , md : 180}}
           src={'/white-logo.png'} cursor="pointer"
         /></Link>
          </Box>
          <Box 
          onClick={() => router.push('/signup')}
          p={{base : 2 , md:8}}
          display={'flex'}
          justifyContent={'center'}
          alignItems={'center'}
          >
            <Text 
            color={'#fff'}
            fontWeight={'normal'}
            fontSize={{base : '10px' , md : 'sm'}}
            mr={{base: 1,md:6}}>{t('login.text2')}</Text>
            <Spacer />
            <Button
            onClick={() => router.push('/login')}
            borderColor={'#fff'}
            variant={'outline'}
            color={'#fff'}
            fontSize={{base : '10px' , md : 'sm'}}
          ml={1}
            >{t('login.text1')}</Button>
          </Box>
        </Box>
        </Container>
     
      </Box>

      <Box width={"100%"} height={{base : '50vh' ,md : "79vh"}} backgroundColor={"#000"}></Box>

      <main style={{ maxWidth: "1420px", margin: "auto" }}>
        <Box
          mt={10}
          mb={10}
          display={"flex"}
          width={"100%"}
          position={"absolute"}
          top={{base : '100px' , md: "25vh"}}
          left={"0vw"}
          flexDirection={"column"}
        >
          <Box
          boxShadow="0px 4px 8px rgba(0, 0, 0, 0.1)" 
            borderRadius={"10px"}
            mx={{base : '20px' , sm : 'auto'}}
            maxW={"1420px"}
            minW={{ base: 300, md: 400 }}
            maxWidth={600}
            px={7}
            pt={8}
            pb={3}
          
            backgroundcolor={"#000"}
            display={"flex"}
            flexDirection={"column"}
            alignItems={"center"}
            bg='#fff'
            color={'black'}
          >
            <Text
              fontSize="2xl"
              textAlign={"center"}
              fontWeight={"700"}
           
            >
                {t('login.text3')}
            </Text>

           

            <Stack p={5} pt={1} w={"100%"} spacing={5}>
  <Box>
  <Box
              my={5}
              backgroundColor={"#FFDFD9"}
              
              p={2}
              w={'fit-content'}
              maxW={'340px'}
              fontWeight={"600"}
              color={"#545454"}
              fontSize={"12px"}
              display={"flex"}
              alignItems={"center"}
              borderRadius={"3px"}
            >
              <WarningTwoIcon w={"12px"} m={2} />
              <Text>{t('login.text4')}</Text>
            </Box>
    <Text fontWeight={"semibold"} letterSpacing={"0.5px"}>
      {t('login.text5')}
    </Text>
    <Input
        name="email"
        p={2}
        borderRadius={"5px"}
        width={"100%"}
        size="sm"
        fontWeight={"semibold"}
        borderColor="gray.300"
        _hover={{ borderColor: "#01FBFB", boxShadow: "0 0 0 2px  rgba(1, 251, 251, 0.3)" }}
        _focus={{ borderColor: "#01FBFB", boxShadow: "0 0 0 2px  rgba(1, 251, 251, 0.3)" }}
        type="email"
        placeholder={t('login.text6')}
        _placeholder={{ color: "gray.400" , fontWeight:'normal' , fontSize:'xs' }}
        my={1}
        onChange={(e) => setEmail(e.target.value)}
    />
    <Text  color={"red"} fontWeight='normal' fontSize={"xs"}>
      {t('login.text7')}
    </Text>
  </Box>

  <Box>
      <Text fontWeight={"semibold"} letterSpacing={"0.5px"}>
        {t('login.text8')}
      </Text>
      <InputGroup>
        <Input
          p={2}
          borderRadius={"5px"}
          width={"100%"}
          size="sm"
          fontWeight={"semibold"}
          borderColor="gray.300"
          _hover={{ borderColor: "#01FBFB", boxShadow: "0 0 0 2px rgba(1, 251, 251, 0.3)" }}
          _focus={{ borderColor: "#01FBFB", boxShadow: "0 0 0 2px rgba(1, 251, 251, 0.3)" }}
          _placeholder={{ color: "gray.400", fontWeight: 'normal', fontSize: 'xs' }}
          my={1}
          type={showPassword ? "text" : "password"}
          placeholder={t('login.text9')}
          onChange={(e) => setPassword(e.target.value)}
        />
        <InputRightElement width="2.5rem">
          <IconButton
            h="1.75rem"
            size="sm"
            onClick={() => setShowPassword(!showPassword)}
            icon={showPassword ? <FaEyeSlash /> : <FaEye />}
          />
        </InputRightElement>
      </InputGroup>
    </Box>

  <Button
   backgroundColor={"#01FBFB"}
   color={"#000"}
   py={6}
   px={8}
   fontSize={{ base: "sm", md: "md" }}
   _hover={{
    bg: "#0db9b9",
     boxShadow: "0 0 10px rgba(1, 251, 251, 0.7)",
     transition: "background-color 0.3s, color 0.3s, box-shadow 0.3s",
   }}
    onClick={() => login(email, password)}
  >
    {t('login.text3')}
  </Button>

  <Button
   color={'#888A8E'}
   fontSize={'xs'
   }
   textDecor={'underline'}
    onClick={() => {
      router.push("/recover_password");
    }}
  >
    {t('login.text11')}
  </Button>
</Stack>
          </Box>
        </Box>
      </main>
    </Box>
  );
}

export async function getServerSideProps(context) {
  const token = getCookie("token", context.req);

  if (token) {
    return {
      redirect: {
        destination: "/dashboard",
        permanent: false,
      },
    };
  }
  return {
    props: {},
  };
}