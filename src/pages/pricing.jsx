import useAuth from '../contexts/AuthContext';
import { getCookie } from '../services/cookies';
import {   
  Accordion,
  AccordionButton,
  AccordionPanel,
  AccordionIcon,
  Box, Button, HStack, Text, Image, Heading, ButtonGroup, Stack, RadioGroup, useDisclosure, Divider } from '@chakra-ui/react'
import Head from 'next/head'

import Info from '../../components/InfoComponent';
import AccordionItemProps from '../../components/AcordionItem';
import { AddIcon, MinusIcon } from '@chakra-ui/icons';
import FooterJSX from '../../components/Footer';
import RadioPlans from '../../components/RadioPlans';
import { useRouter } from 'next/router';
import SegmentedControl from '../../components/SegmentControl';
import {useEffect, useRef, useState} from 'react';
import { useTranslation } from 'react-i18next';
import SetLanguage from "../contexts/language";
export default function Home () {

  const [isSelected, setIsSelected] = useState(null);
    const { allApiWithClientIP } = SetLanguage()
    const { t, i18n } = useTranslation();


  const handleItemClick = (index) => {
    setIsSelected(index.target.value)
  }

  const [selectedValue1, setSelectedValue1] = useState("mensal");

    useEffect(() => {
        allApiWithClientIP();
    }, [])
  return (
    <Box>
      <Head>
        <title>Create Next App</title>
        <meta name='description' content='Generated by create next app' />
        <meta name='viewport' content='width=device-width, initial-scale=1' />
        <link rel='icon' href='/favicon.ico' />
      </Head>

      <main style={{ maxWidth: '1420px', margin: 'auto'}}>
       <Box my={10} py={10}>
       <Heading
        textAlign={'center'}
        display={'block'}
        mx={'auto'}
        mt={10}
        
        maxW={{base : '95%' , md : '600px'}}
         

        fontSize={{base : '4xl' , md :"6xl"}} 
        className="ff_league"

        >{t('pricingText.text1')}</Heading>
        <Text fontSize={'md'} textAlign={'center'} mt={10} fontWeight={'normal'}>
            {t('pricingText.text2')}  <br/> {t('pricingText.text3')}

        </Text>
       
       </Box>

      <Box 
      mt={10}
      mb={10}
      display={'flex'}
      width={'100%'}
      alignItems={'center'}
      flexDirection={'column'}
      >
        <Box
        width={{base : '95%' , md :'65%'}}
        >
            <Box
            display={'flex'}
            flexDirection={'row'}
            justifyContent={'start'}
            w={'100%'}
            >
            <SegmentedControl
                name="group-control-field"
                defaultIndex={1}
                callback={(val) => setSelectedValue1(val)}
                controlRef={useRef()}
                segments={[
                    {
                    label: t('pricingText.text4'),
                    value: "Mensal",
                    ref: useRef()
                    },
                    {
                    label: t('pricingText.text5'),
                    value: "Anual",
                    ref: useRef()
                    },
                ]}
                />
            </Box>


          <RadioGroup>
            <Stack spacing={5} direction='column'>
                {selectedValue1 === "Mensal" ? (
                <>
                    <RadioPlans checkbox={true} title="Plus" value="test1"  products={50} price={44} isChecked={isSelected === "test1"} functionExec={handleItemClick}/>
                    <RadioPlans    checkbox={true} title="Premium" value="teste2" products={500} price={49} isChecked={isSelected === "teste2"} functionExec={handleItemClick}/>
                </>
                ): (
                <>
                    <RadioPlans  checkbox={true} title="Plus" value="anual-1" products={50} price={70} isChecked={isSelected === "anual-1"} functionExec={handleItemClick}/>
                    <RadioPlans  checkbox={true} title="Premium" value="anual-2" products={500} price={79} isChecked={isSelected === "anual-2"} ilimited={true} functionExec={handleItemClick}/>
                </>
                )}
            </Stack>
        </RadioGroup>
        <Divider
                  borderColor={"#CFCFCF"}
                  py={3}
                  margin={"auto"}
                />
        <Box display={'flex'} 
        mt={10}
        justifyContent={'end'}>
            <Button
           backgroundColor={"#01FBFB"}
           color={"#000"}
           py={6}
           px={8}
           minW={'220px'}
           fontSize={{ base: "sm", md: "md" }}
           _hover={{
            bg: "#0db9b9",
             boxShadow: "0 0 10px rgba(1, 251, 251, 0.7)",
             transition: "background-color 0.3s, color 0.3s, box-shadow 0.3s",
           }}
           
            >{t('pricingText.text6')}</Button>
        </Box>

        </Box>

      </Box>
      </main>
    </Box>
  )
}

export async function getServerSideProps(context) {
  const token = getCookie("token", context.req);
  
  if (token) {

    return {
      redirect: {
        destination: '/dashboard',
        permanent: false,
      },
    }
  }
  return {
    props: {
    },
  };
}
