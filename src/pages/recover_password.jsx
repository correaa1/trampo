import useAuth from "../contexts/AuthContext";
import { getCookie } from "../services/cookies";
import {
  Accordion,
  AccordionButton,
  AccordionPanel,
  AccordionIcon,
  Box,
  Button,
  HStack,
  Text,
  Image,
  Heading,
  ButtonGroup,
  Stack,
  RadioGroup,
  
  InputLeftElement,
  Input,
  Spacer,
  Container,
  InputGroup, InputRightElement, IconButton } from "@chakra-ui/react";
  import { FaEye, FaEyeSlash } from "react-icons/fa";
import Head from "next/head";

import Info from "../../components/InfoComponent";
import AccordionItemProps from "../../components/AcordionItem";
import {
  AddIcon,
  MinusIcon,
  PhoneIcon,
  WarningTwoIcon,
} from "@chakra-ui/icons";
import FooterJSX from "../../components/Footer";
import RadioPlans from "../../components/RadioPlans";
import { useRouter } from "next/router";
import SegmentedControl from "../../components/SegmentControl";
import {useEffect, useRef, useState} from "react";
import { AiFillCheckCircle } from "react-icons/ai";
import { useTranslation } from 'react-i18next';
import SetLanguage from "../contexts/language";
import Images from 'next/image'
import Link from "next/link";

export default function Home() {
  const [recoverdPassword, setRecoverdPassword] = useState(false);
  const [showPassword, setShowPassword] = useState(false);
  const [passwordChanged, setPasswordChanged] = useState(false);
  const [new_pass, setNewpass] = useState(null);
  const [mail, setmail] = useState(null)
  const {verify, verificado, user_id, change_pass, send_mail } = useAuth();
  const router = useRouter();
  const { allApiWithClientIP } = SetLanguage()
  const { t, i18n } = useTranslation();
  const {token} = router.query ? router.query : null;
  const handleClick = (token) => {
    verify(token).then((resultado) => {
      if (resultado){
        change_pass(new_pass, token);
        setPasswordChanged(true)
      }
    });
    
  };

  useEffect(() => {
    allApiWithClientIP();
  }, [])

  return (
    <Box>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <Box width={"100%"} height={"50vh"} backgroundColor={"#000"} mt={-2}>
      <Container maxW={'container.xl'}>
        <Box
         w={'100%'}
         justifyContent={{base : 'space-between' , md : 'space-between'}}
         display={'flex'}  py={3}
         flexDirection={'row'}
        >
        
          <Box>
          <Link href="/">
           <Image
           
           
           width={{base : 120 , md : 180}}
           src={'/white-logo.png'} cursor="pointer"
         /></Link>
          </Box>
          <Box 
          p={{base : 2 , md:8}}
          display={'flex'}
          justifyContent={'center'}
          alignItems={'center'}
          >
            <Text 
            color={'#fff'}
            fontWeight={'normal'}
            fontSize={{base : '7px' , md : 'sm'}}
            mr={{base: 3,md:6}}>{t('recover_password.text1')}</Text>
            <Spacer />
            <Button
            onClick={() => router.push('/login')}
            borderColor={'#fff'}
            variant={'outline'}
            color={'#fff'}
            size={{base : 'sm' , md :'md'}}
            >{t('recover_password.text2')}</Button>
          </Box>
        </Box>
        </Container>

      </Box>

      <Box width={"100%"} height={"50vh"} backgroundColor={"#000"}></Box>

      <main style={{ maxWidth: "1420px", margin: "auto" }}>
        <Box
          mt={10}
          mb={10}
          display={"flex"}
          width={"100%"}
          position={"absolute"}
          top={"25vh"}
          left={"0vw"}
          flexDirection={"column"}
          
        >
          <Box
          
            borderRadius={"10px"}
            m={"auto"}
            maxW={"1420px"}
            minW={{base: 300, md: 400}}
            maxWidth={600}
          
            px={7}
            py={9}
            pb={5}
          
            display={"flex"}
            flexDirection={"column"}
            alignItems={"center"}
            boxShadow="0px 4px 8px rgba(0, 0, 0, 0.1)" 
            bg={'#ffffff'}
            color={'#000'}
          >
        {!passwordChanged ? (
            
            <>
            {!token ? (
              <>
                <Text
                  fontSize="xl"
                  textAlign={"center"}
                  fontWeight={"600"}
                  letterSpacing={"0.5px"}
                >
                  {t('recover_password.text3')}
                </Text>

                <Box
                  p={0.5}
                  w={280}
                  fontWeight={"600"}
                  color={"blackAlpha.700"}
                  fontSize={"12px"}
                  display={"flex"}
                  alignItems={"center"}
                  borderRadius={"3px"}
                  my={2}
                  
                >
                  <Text  fontSize={'2xs'} textAlign={'center'}>
                    {t('recover_password.text4')}
                  </Text>
                </Box>

                <Stack p={5} w={"100%"} spacing={5} mt={3}> 
      <Box>
        <Text fontWeight={"semibold"} letterSpacing={"0.5px"}>
          {t('recover_password.text5')}
        </Text>
        <Input
          onChange={(e) => setmail(e.target.value)}
          p={2}
          borderRadius={"5px"}
          width={"100%"}
          size="sm"
          fontWeight={"semibold"}
          borderColor="gray.300"
          _hover={{ borderColor: "#F3344B", boxShadow: "0 0 0 2px rgba(243, 52, 75, 0.3)" }}
          _focus={{ borderColor: "#F3344B", boxShadow: "0 0 0 2px rgba(243, 52, 75, 0.3)" }}
          type="email"
          placeholder=  {t('recover_password.text6')}
          _placeholder={{ color: "gray.400" , fontWeight:'normal' , fontSize:'xs' }}
          my={1}
        />
       
      </Box>

   <Box>
   <Link href={'/confirmPasswordForget'}>
   <Button
   backgroundColor={"#01FBFB"}
   color={"#000"}
   py={6}
   px={8}
   mt={5}
   w='full'
   fontSize={{ base: "sm", md: "md" }}
   _hover={{
    bg: "#0db9b9",
     boxShadow: "0 0 10px rgba(1, 251, 251, 0.7)",
     transition: "background-color 0.3s, color 0.3s, box-shadow 0.3s",
   }}

    
  >
     {t('recover_password.text7')}
  </Button>
  </Link>
   </Box>
    </Stack>
              </>
            ): (
            <>
                {/* PARTE DE RECUPERAÇÃO COM EMAIL ENCONTRADO */}

                <Text
                  fontSize="xl"
                  textAlign={"center"}
                  fontWeight={"600"}
                  letterSpacing={"0.5px"}
                >
                 Change password
                </Text>

                <Box
                  p={0.5}
                  w={280}
                  fontWeight={"600"}
                  color={"#545454"}
                  fontSize={"12px"}
                  display={"flex"}
                  alignItems={"center"}
                  borderRadius={"3px"}
                  my={3}
                >
                  <Text textAlign={'center'} fontWeight={'normal'}>
                  Enter a new password to access your account.
                  </Text>
                </Box>

                <Stack p={5} w={"100%"} spacing={5}>
                <Box>
      <Text fontWeight={"semibold"} letterSpacing={"0.5px"}>
        New password
      </Text>
      <InputGroup>
        <Input
          p={2}
          borderRadius={"5px"}
          width={"100%"}
          size="sm"
          fontWeight={"semibold"}
          borderColor="gray.300"
          _hover={{ borderColor: "#F3344B", boxShadow: "0 0 0 2px rgba(243, 52, 75, 0.3)" }}
          _focus={{ borderColor: "#F3344B", boxShadow: "0 0 0 2px rgba(243, 52, 75, 0.3)" }}
          _placeholder={{ color: "gray.400", fontWeight: 'normal', fontSize: 'xs' }}
          my={1}
          type={showPassword ? "text" : "password"}
          placeholder="Enter your new password"
        />
        <InputRightElement width="2.5rem">
          <IconButton
            h="1.75rem"
            size="sm"
            onClick={() => setShowPassword(!showPassword)}
            icon={showPassword ? <FaEyeSlash /> : <FaEye />}
          />
        </InputRightElement>
      </InputGroup>
      <Text color={"red"} fontWeight="normal" fontSize={"2xs"}>
        Por favor, digite uma senha válida.
      </Text>
    </Box>


                  <Box>
                    <Text fontWeight={"semibold"} letterSpacing={"0.5px"}>
                    Confirm password
                    </Text>
                    <Input
                      onChange={(e) => setNewpass(e.target.value)}
                      borderRadius={"5px"}
                      width={"100%"}
                      size="sm"
                      fontWeight={"semibold"}
                      borderColor="gray.300"
                      _hover={{ borderColor: "#F3344B", boxShadow: "0 0 0 2px rgba(243, 52, 75, 0.3)" }}
                      _focus={{ borderColor: "#F3344B", boxShadow: "0 0 0 2px rgba(243, 52, 75, 0.3)" }}
                 
                
                      _placeholder={{ color: "gray.400" , fontWeight:'normal' , fontSize:'xs' }}
                      my={1}
                      type="tel"
                      placeholder="Enter your new password"
                    />
                    <Text  color={"red"} fontWeight='normal' fontSize={"2xs"}>
                      Por favor, tente corrigir a senha digitada.
                    </Text>
                  </Box>


                <Box>

                <Button
                   backgroundColor={"#01FBFB"}
                   color={"#000"}
                   py={6}
                   px={8}
                   mt={5}
                   w='full'
                   fontSize={{ base: "sm", md: "md" }}
                   _hover={{
                    bg: "#0db9b9",
                     boxShadow: "0 0 10px rgba(1, 251, 251, 0.7)",
                     transition: "background-color 0.3s, color 0.3s, box-shadow 0.3s",
                   }}
                    onClick={() => handleClick(token)}
                  >
                  Change password
                  </Button>
                </Box>

                </Stack>
              </>
            )}
            </>
            ): (
                <>
                {/* PARTE DE RECUPERAÇÃO CONCLUIDA */}
                

                <AiFillCheckCircle size={50} color={"#20A39E"} />
                <Text
                  fontSize="xl"
                  textAlign={"center"}
                  fontWeight={"600"}
                  letterSpacing={"0.5px"}
                  my={3}
                >
               Done!
                </Text>

                
                  <Text
                
                  color={"#545454"}
                  fontSize={"10px"}
                  fontWeight={'normal'}
                  >
                 Your password has been changed successfully.
                  </Text>

                <Stack p={5} w={"100%"} spacing={5}>
                 <Box>
                 <Button
                   backgroundColor={"#01FBFB"}
                   color={"#000"}
                   py={6}
                   px={8}
                   mt={5}
                   w='full'
                   fontSize={{ base: "sm", md: "md" }}
                   _hover={{
                    bg: "#0db9b9",
                     boxShadow: "0 0 10px rgba(1, 251, 251, 0.7)",
                     transition: "background-color 0.3s, color 0.3s, box-shadow 0.3s",
                   }}
                    onClick={() => router.push("/login")}
                  >
                   Back to login
                  </Button>
                 </Box>
                </Stack>
                </>
            )}
          </Box>
        </Box>
      </main>
    </Box>
  );
}

// export async function getServerSideProps(context) {
//   const token = getCookie("token", context.req);

//   if (token) {
//     return {
//       redirect: {
//         destination: "/dashboard",
//         permanent: false,
//       },
//     };
//   }
//   return {
//     props: {},
//   };
// }
