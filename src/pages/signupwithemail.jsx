import { Checkbox, CheckboxGroup, Flex  ,  IconButton, InputRightElement} from '@chakra-ui/react'
import { getCookie, setCookie } from "../services/cookies";
import {
  Accordion,
  AccordionButton,
  AccordionPanel,
  AccordionIcon,
  Box,
  Button,
  HStack,
  Text,
  Image,
  Heading,
  ButtonGroup,
  Stack,
  RadioGroup,
  InputGroup,
  InputLeftElement,
  Input,
  Container,
  Spacer,
} from "@chakra-ui/react";
import Head from "next/head";
import { FaEye, FaEyeSlash } from "react-icons/fa";
import Info from "../../components/InfoComponent";
import AccordionItemProps from "../../components/AcordionItem";
import {
  AddIcon,
  MinusIcon,
  PhoneIcon,
  WarningTwoIcon,
} from "@chakra-ui/icons";
import FooterJSX from "../../components/Footer";
import RadioPlans from "../../components/RadioPlans";
import { useRouter } from "next/router";
import Images from "next/image";
import SegmentedControl from "../../components/SegmentControl";
import {useEffect, useRef, useState} from "react";
import Link from 'next/link';
import useAuth from '../contexts/AuthContext';

import { useTranslation } from 'react-i18next';
import SetLanguage from "../contexts/language";

export default function Home() {
  const { login, signup } = useAuth();
  const [isSelected, setIsSelected] = useState(null);
  const router = useRouter();
    const { allApiWithClientIP } = SetLanguage()
    const { t, i18n } = useTranslation();
  const [email, setEmail] = useState(null);
  const [password, setPassword] = useState(null);
  const [name, setName] = useState(null);
  const [showPassword, setShowPassword] = useState(false);
  const handleItemClick = (index) => {
    setIsSelected(index.target.value);
  };
  const handleClick = () => {
    const informationToPass = 'alguma_informacao';

    // Define a informação em um cookie
    setCookie('email', email);
    setCookie('password', password);
    setCookie('name', name);

    // Navegue para a página do Telegram
    router.push('/telegram');
  };
  const [selectedValue1, setSelectedValue1] = useState("complete");

    useEffect(() => {
        allApiWithClientIP();
    }, [])

  return (
    <Box>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <Box width={"100%"} height={"50vh"} marginTop={"-5px"}>
        <Container maxW={"container.xl"}>
          <Box
            w={"100%"}
            justifyContent={{ base: "center" }}
            display={"flex"}
            flexDirection={"row"}
          >
            <Box>
              <Image width={{ base: 120, md: 180 }} src={"/white-logo.png"} />
            </Box>
        
          </Box>
        </Container>
      </Box>

      <Box width={"100%"} height={"50vh"} backgroundColor={"#000"}></Box>

      <main style={{ maxWidth: "1420px", margin: "auto" }}>
        <Box
          mt={4}
          mb={10}
          display={"flex"}
          width={"100%"}
          position={"absolute"}
          top={{ base: "100px", md: "25vh" }}
          left={"0vw"}
          flexDirection={"column"}
        >
          <Box
          
            
            mx={'auto'}
            // minW={{ base: 300, md: 400 }}
            width={'95%'}
            maxW='500px'
           
            backgroundcolor={"#000"}
            display={"flex"}
            flexDirection={"column"}
            alignItems={"stretch"}
           
            color={"black"}
          >
              

            <Stack  borderRadius={"10px"}  boxShadow="0px 4px 8px rgba(0, 0, 0, 0.1)" w={"100%"} spacing={5}  bg="#fff"  px={7}
            pt={8}
            pb={8} 
            mb={10}
            >
               <Flex justify={'center'} pb={6} pt={3}>
            <div className={'steps'}>
                <span className="step">

                </span>
                <span className="line">

                </span>
                <span className="step">

                </span>
            </div>
            </Flex>

<Box>
               
               <Text fontWeight={"semibold"} letterSpacing={"0.5px"}>
                   {t('signupwithemail.text1')}
               </Text>
               <Input
                 onChange={(e) => setName(e.target.value)}
                 p={2}
                 borderRadius={"5px"}
                 width={"100%"}
                 size="sm"
                 fontWeight={"semibold"}
                 // if invalid other wise gray.300
                 borderColor="red.300"

                 _hover={{
                   borderColor: "#01FBFB",
                   boxShadow: "0 0 0 2px  rgba(1, 251, 251, 0.3)",
                 }}
                 _focus={{
                   borderColor: "#01FBFB",
                   boxShadow: "0 0 0 2px  rgba(1, 251, 251, 0.3)",
                 }}
                 type="text"
                 placeholder={t('signupwithemail.text2')}
                 _placeholder={{
                   color: "gray.400",
                   fontWeight: "normal",
                   fontSize: "xs",
                 }}
                 my={1}
               />
               {/* show if invalid  */}
               <Text color={"red"} fontWeight="normal" fontSize={"xs"}>
                   {t('signupwithemail.text3')}
               </Text>
             </Box>
              <Box>
               
                <Text fontWeight={"semibold"} letterSpacing={"0.5px"}>
                    {t('signupwithemail.text4')}
                </Text>
                <Input
                  p={2}
                  borderRadius={"5px"}
                  width={"100%"}
                  size="sm"
                  fontWeight={"semibold"}
                  // if invalid other wise gray.300
                  borderColor="red.300"

                  _hover={{
                    borderColor: "#01FBFB",
                    boxShadow: "0 0 0 2px  rgba(1, 251, 251, 0.3)",
                  }}
                  _focus={{
                    borderColor: "#01FBFB",
                    boxShadow: "0 0 0 2px  rgba(1, 251, 251, 0.3)",
                  }}
                  type="email"
                  placeholder={t('signupwithemail.text5')}
                  _placeholder={{
                    color: "gray.400",
                    fontWeight: "normal",
                    fontSize: "xs",
                  }}
                  my={1}
                  onChange={(e) => setEmail(e.target.value)}
                />
                {/* show if invalid  */}
                <Text color={"red"} fontWeight="normal" fontSize={"xs"}>
                    {t('signupwithemail.text6')}
                </Text>
              </Box>

              <Box>
      <Text fontWeight={"semibold"} letterSpacing={"0.5px"}>
          {t('signupwithemail.text7')}
      </Text>
      <InputGroup> {/* Wrap your Input in InputGroup */}
        <Input
          onChange={(e) => setPassword(e.target.value)}
          p={2}
          borderRadius={"5px"}
          width={"100%"}
          size="sm"
          fontWeight={"semibold"}
          borderColor="red.300"
          _hover={{
            borderColor: "#01FBFB",
            boxShadow: "0 0 0 2px rgba(1, 251, 251, 0.3)",
          }}
          _focus={{
            borderColor: "#01FBFB",
            boxShadow: "0 0 0 2px rgba(1, 251, 251, 0.3)",
          }}
          _placeholder={{
            color: "gray.400",
            fontWeight: "normal",
            fontSize: "xs",
          }}
          my={1}
          type={showPassword ? "text" : "password"}
          placeholder={t('signupwithemail.text8')}
        />
        <InputRightElement width="2.5rem">
          <IconButton
            h="1.75rem"
            size="sm"
            onClick={() => setShowPassword(!showPassword)}
            icon={showPassword ? <FaEyeSlash /> : <FaEye />}
          />
        </InputRightElement>
      </InputGroup>
      {/* show if invalid */}
      <Text color={"red"} fontWeight="normal" fontSize={"xs"}>
          {t('signupwithemail.text9')}
      </Text>
    </Box>


             <Flex>

             <Checkbox border={'none'}><Text fontSize={'9px'} fontWeight={'normal'}>{t('signupwithemail.text10')} <Link href={'#'} style={{textDecoration:'underline'}}>{t('signupwithemail.text11')}</Link> {t('signupwithemail.text12')} <Link  style={{textDecoration:'underline'}} href={'#'} >{t('signupwithemail.text13')} </Link>
</Text></Checkbox>   
             
             </Flex>
            </Stack>
            <Button
            onClick={() => handleClick()}
           backgroundColor={"#01FBFB"}
           color={"#000"}
           py={6}
           px={8}
           minW={'220px'}
           fontSize={{ base: "sm", md: "md" }}
           _disabled={ {
            bg:' rgba(1, 251, 251, 0.24)',
            color : '#01FBFB',
            pointerEvents:'none',
            cursor:'not-allowed'
             }}
           _hover={{
            bg: "#0db9b9",
             boxShadow: "0 0 10px rgba(1, 251, 251, 0.7)",
             transition: "background-color 0.3s, color 0.3s, box-shadow 0.3s",
             
           }}
           
          
            >{t('signupwithemail.text14')}</Button>

            <Flex color={'#fff'} fontWeight={'normal'} gap={2} justifyContent={'center'} my={10}>
                <Text>{t('signupwithemail.text15')}</Text>
                <Link href="/login" style={{textDecoration:'underline'}}>{t('signupwithemail.text16')}</Link>
            </Flex>
          </Box>
         
        </Box>
      </main>
    </Box>
  );
}

export async function getServerSideProps(context) {
  const token = getCookie("token", context.req);

  if (token) {
    return {
      redirect: {
        destination: "/dashboard",
        permanent: false,
      },
    };
  }
  return {
    props: {},
  };
}
