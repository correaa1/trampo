import useAuth from "../contexts/AuthContext";
import { getCookie, removeCookie } from "../services/cookies";
import {
  Accordion,
  AccordionButton,
  AccordionPanel,
  AccordionIcon,
  Box,
  Button,
  HStack,
  Text,
  Image,
  Heading,
  ButtonGroup,
  Stack,
  RadioGroup,
  InputGroup,
  InputLeftElement,
  Input,
  Container,
  Spacer,
  Flex,
} from "@chakra-ui/react";
import Head from "next/head";

import Info from "../../components/InfoComponent";
import AccordionItemProps from "../../components/AcordionItem";
import {
  AddIcon,
  MinusIcon,
  PhoneIcon,
  WarningTwoIcon,
} from "@chakra-ui/icons";
import FooterJSX from "../../components/Footer";
import RadioPlans from "../../components/RadioPlans";
import { useRouter } from "next/router";
import Images from "next/image";
import SegmentedControl from "../../components/SegmentControl";
import {useEffect, useRef, useState} from "react";
import { toast } from 'react-toastify';
import 'react-toastify/dist/ReactToastify.css';
import { useTranslation } from 'react-i18next';
import SetLanguage from "../contexts/language";

import Cookies from 'js-cookie';
export default function Home() {
  const { login, signup } = useAuth();
  const [showPopup, setShowPopup] = useState(false);
  const [isSelected, setIsSelected] = useState(null);
  const router = useRouter();
    const { allApiWithClientIP } = SetLanguage()
    const { t, i18n } = useTranslation();

  const handleItemClick = (index) => {
    setIsSelected(index.target.value);
  };
  const email = Cookies.get("email")
  const name = Cookies.get("name")
  const password = Cookies.get("password")
      const [selectedValue1, setSelectedValue1] = useState("complete");
  const [telegram, setTelegram] = useState(null);
  const [errorMessage, setErrorMessage] = useState('');
  const ErrorPopup = ({ message, onClose }) => {
    const popupStyles = {
      position: 'fixed',
      top: '50%',
      left: '50%',
      transform: 'translate(-50%, -50%)',
      width: '30%',
      height: '20%',
      backgroundColor: '#fff', // Fundo branco
      boxShadow: '0px 4px 8px rgba(0, 0, 0, 0.1)',
      borderRadius: '10px',
      padding: '20px',
      textAlign: 'center',
      color: '#000', // Cor do texto preto
      zIndex: 2
    };

      useEffect(() => {
          allApiWithClientIP();
      }, [])

    return (
      <div className="error-popup" style={popupStyles}>
        <p >{message}</p>
        <button onClick={onClose}>Close</button>
      </div>
    );
  };
  const closeErrorPopup = () => {
    setShowPopup(false);
    setErrorMessage('');
  };
  const handleSignup = async (name, email, password, telegram_username, idioma) => {
    const result = await signup(name, email, password, telegram_username, idioma);
    console.log(result)
    if (result.success) {
      router.push('/dashboard');
    } else {
      setErrorMessage('Usuário já cadastrado');
      setShowPopup(true);
    }
  };

  return (
    <Box>
      {showPopup && <ErrorPopup message={errorMessage} onClose={closeErrorPopup} />}
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <Box width={"100%"} height={"50vh"}  marginTop={'-5px'}>
        <Container maxW={'container.xl'}>
        <Box
         w={'100%'}
         justifyContent={{base : 'space-between' , md : 'space-between'}}
         display={'flex'}  py={3}
         flexDirection={'row'}
        >
        
          <Box>
            
          </Box>
          <Box 
          p={{base : 2 , md:8}}
          display={'flex'}
          justifyContent={'center'}
          alignItems={'center'}
          >
            <Text 
            color={'#fff'}
            fontWeight={'normal'}
            fontSize={{base : '7px' , md : 'sm'}}
            mr={{base: 3,md:6}}>{t('telegram.text1')}</Text>
            <Spacer />
            <Button
            onClick={() => router.push('/login')}
            borderColor={'#fff'}
            variant={'outline'}
            color={'#fff'}
            size={{base : 'sm' , md :'md'}}
            >{t('telegram.text2')}
            </Button>
          </Box>
        </Box>
        </Container>
     
      </Box>

      <Box width={"100%"} height={"50vh"} backgroundColor={"#000"}></Box>

      <main style={{ maxWidth: "1420px", margin: "auto" }}>
        <Box
          mt={10}
          mb={10}
          display={"flex"}
          width={"100%"}
          position={"absolute"}
          top={{base : '100px' , md: "25vh"}}
          left={"0vw"}
          flexDirection={"column"}
        >
          <Box
          boxShadow="0px 4px 8px rgba(0, 0, 0, 0.1)" 
            borderRadius={"10px"}
            mx={{base : '20px' , sm : 'auto'}}
            maxW={"1420px"}
            minW={{ base: 300, md: 400 }}
            maxWidth={600}
            px={7}
            pt={8}
            pb={3}
            textAlign={'center'}
          
            backgroundcolor={"#000"}
            display={"flex"}
            flexDirection={"column"}
            alignItems={"center"}
            bg='#fff'
            color={'black'}
          >
            

           

            <Flex justify={'center'} >
            <div className={'steps active'}>
                <span className="step">

                </span>
                <span className="line">

                </span>
                <span className="step">

                </span>
            </div>
            </Flex>
            <Text pt={7} lineHeight={"1.2"} fontSize={"20px"} fontWeight={"semibold"} >
                {t('telegram.text3')}<br/>{t('telegram.text4')}
            </Text>
            <Text color='#717273' fontSize={'9px'} fontWeight={'normal'} my={3} >{t('telegram.text5')}<br/>
                {t('telegram.text6')}</Text>

<Box textAlign={'start'} w={'full'} mt={4} mb={3}>

<Text fontWeight={"semibold"} letterSpacing={"0.5px"}>
    {t('telegram.text7')}
               </Text>

<Input

                onChange={(e) => setTelegram(e.target.value)}
                p={3}
                borderRadius={"5px"}
                width={"100%"}
                size="sm"
                fontWeight={"semibold"}
                // if invalid other wise gray.300
                borderColor="red.300"

                _hover={{
                  borderColor: "#01FBFB",
                  boxShadow: "0 0 0 2px  rgba(1, 251, 251, 0.3)",
                }}
                _focus={{
                  borderColor: "#01FBFB",
                  boxShadow: "0 0 0 2px  rgba(1, 251, 251, 0.3)",
                }}
                type="text"
                placeholder={t('telegram.text8')}
                _placeholder={{
                  color: "gray.400",
                  fontWeight: "normal",
                  fontSize: "xs",
                }}
                my={1}
                
              />
              {/* show if invalid  */}
              <Text color={"red"} fontWeight="normal" fontSize={"xs"}>
                  {t('telegram.text9')}
              </Text>

              
</Box>

<Button
         onClick={() => handleSignup(name, email, password, telegram, idioma)}
         backgroundColor={"#01FBFB"}
         color={"#000"}
         py={5}
         px={6}
         mt={3}
         mb={6}
         
    w='full'
         
         fontSize={{ base: "sm", md: "sm" }}
        
         _hover={{
          bg: "#0db9b9",
           boxShadow: "0 0 10px rgba(1, 251, 251, 0.7)",
           transition: "background-color 0.3s, color 0.3s, box-shadow 0.3s",
           
         }}
         
        
          >{t('telegram.text10')}</Button>
          </Box>
        </Box>
      </main>
    </Box>
  );
}

export async function getServerSideProps(context) {
  const token = getCookie("token", context.req);
  removeCookie("email");
  removeCookie("password");
  removeCookie("name");
  if (token) {
    return {
      redirect: {
        destination: "/dashboard",
        permanent: false,
      },
    };
  }
  return {
    props: {},
  };
}
